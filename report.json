[
    {
        "analysis_type": "detect_struct_packing",
        "contract_name": "InefficientContract2",
        "structure_name": "Person",
        "current_field_order": [
            {
                "field_name": "id",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "isActive",
                "field_type": "bool",
                "field_size_bytes": 1
            },
            {
                "field_name": "age",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "balance",
                "field_type": "uint256",
                "field_size_bytes": 32
            }
        ],
        "recommended_field_order": [
            {
                "field_name": "id",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "balance",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "isActive",
                "field_type": "bool",
                "field_size_bytes": 1
            },
            {
                "field_name": "age",
                "field_type": "uint8",
                "field_size_bytes": 1
            }
        ]
    },
    {
        "analysis_type": "detect_struct_packing",
        "contract_name": "InefficientContract2",
        "structure_name": "Car",
        "current_field_order": [
            {
                "field_name": "id",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "numberOfWheels",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "isActive",
                "field_type": "bool",
                "field_size_bytes": 1
            },
            {
                "field_name": "age",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "numberOfPassangers",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "balance",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "isSuperCar",
                "field_type": "bool",
                "field_size_bytes": 1
            },
            {
                "field_name": "gasCunsumption",
                "field_type": "uint128",
                "field_size_bytes": 16
            }
        ],
        "recommended_field_order": [
            {
                "field_name": "id",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "balance",
                "field_type": "uint256",
                "field_size_bytes": 32
            },
            {
                "field_name": "gasCunsumption",
                "field_type": "uint128",
                "field_size_bytes": 16
            },
            {
                "field_name": "numberOfWheels",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "isActive",
                "field_type": "bool",
                "field_size_bytes": 1
            },
            {
                "field_name": "age",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "numberOfPassangers",
                "field_type": "uint8",
                "field_size_bytes": 1
            },
            {
                "field_name": "isSuperCar",
                "field_type": "bool",
                "field_size_bytes": 1
            }
        ]
    },
    {
        "analysis_type": "detect_state_variable_packing",
        "contract_name": "EmptyContract",
        "current_state_variable_order": [],
        "recommended_state_variable_order": []
    },
    {
        "analysis_type": "detect_state_variable_packing",
        "contract_name": "InefficientContract1",
        "current_state_variable_order": [
            {
                "variable_name": "largeArray",
                "variable_type": "uint256[]",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "balances",
                "variable_type": "mapping(address => uint256)",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "totalBalance",
                "variable_type": "uint256",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "anSmallVariable",
                "variable_type": "uint8",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "anotherSmallVariable",
                "variable_type": "uint8",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "justAnotheruint16",
                "variable_type": "uint16",
                "variable_size_bytes": 2
            },
            {
                "variable_name": "justAnotheruint32",
                "variable_type": "uint32",
                "variable_size_bytes": 4
            },
            {
                "variable_name": "isActive",
                "variable_type": "bool",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "isConfirmed",
                "variable_type": "bool",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "isTransfered",
                "variable_type": "bool",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "threshold",
                "variable_type": "uint256",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "contract_address",
                "variable_type": "string",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "owner_name",
                "variable_type": "string",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "fixedArray",
                "variable_type": "uint8[10]",
                "variable_size_bytes": 10
            },
            {
                "variable_name": "dynamicArray",
                "variable_type": "uint8[]",
                "variable_size_bytes": 32
            }
        ],
        "recommended_state_variable_order": [
            {
                "variable_name": "largeArray",
                "variable_type": "uint256[]",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "balances",
                "variable_type": "mapping(address => uint256)",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "totalBalance",
                "variable_type": "uint256",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "threshold",
                "variable_type": "uint256",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "contract_address",
                "variable_type": "string",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "owner_name",
                "variable_type": "string",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "dynamicArray",
                "variable_type": "uint8[]",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "fixedArray",
                "variable_type": "uint8[10]",
                "variable_size_bytes": 10
            },
            {
                "variable_name": "justAnotheruint32",
                "variable_type": "uint32",
                "variable_size_bytes": 4
            },
            {
                "variable_name": "justAnotheruint16",
                "variable_type": "uint16",
                "variable_size_bytes": 2
            },
            {
                "variable_name": "anSmallVariable",
                "variable_type": "uint8",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "anotherSmallVariable",
                "variable_type": "uint8",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "isActive",
                "variable_type": "bool",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "isConfirmed",
                "variable_type": "bool",
                "variable_size_bytes": 1
            },
            {
                "variable_name": "isTransfered",
                "variable_type": "bool",
                "variable_size_bytes": 1
            }
        ]
    },
    {
        "analysis_type": "detect_state_variable_packing",
        "contract_name": "InefficientContract2",
        "current_state_variable_order": [
            {
                "variable_name": "networkVersionUsed",
                "variable_type": "string",
                "variable_size_bytes": 32
            },
            {
                "variable_name": "person",
                "variable_type": "InefficientContract2.Person",
                "variable_size_bytes": 96
            }
        ],
        "recommended_state_variable_order": [
            {
                "variable_name": "person",
                "variable_type": "InefficientContract2.Person",
                "variable_size_bytes": 96
            },
            {
                "variable_name": "networkVersionUsed",
                "variable_type": "string",
                "variable_size_bytes": 32
            }
        ]
    },
    {
        "analysis_type": "detect_boolean_packing",
        "contract_name": "EmptyContract",
        "message": "No boolean variables - no packing required"
    },
    {
        "analysis_type": "detect_boolean_packing",
        "contract_name": "InefficientContract1",
        "boolean_variables": [
            "isActive",
            "isConfirmed",
            "isTransfered"
        ],
        "message": "One uint256 can be used to merge all boolean variables, use this pattern ./templates/booleanPacking.sol"
    },
    {
        "analysis_type": "detect_boolean_packing",
        "contract_name": "InefficientContract2",
        "message": "No boolean variables - no packing required"
    },
    {
        "analysis_type": "detect_uintstar",
        "contract_name": "EmptyContract",
        "message": "No uint* variables - no packing required"
    },
    {
        "analysis_type": "detect_uintstar",
        "contract_name": "InefficientContract1",
        "uint*_variables": [
            {
                "var_name": "anSmallVariable",
                "var_type": "uint8"
            },
            {
                "var_name": "anotherSmallVariable",
                "var_type": "uint8"
            },
            {
                "var_name": "justAnotheruint16",
                "var_type": "uint16"
            },
            {
                "var_name": "justAnotheruint32",
                "var_type": "uint32"
            },
            {
                "var_name": "fixedArray",
                "var_type": "uint8[10]"
            },
            {
                "var_name": "dynamicArray",
                "var_type": "uint8[]"
            }
        ],
        "message": "Instead of all these uint* datatypes, you better use uint256 to help avoid the need for conversion and save gas."
    },
    {
        "analysis_type": "detect_uintstar",
        "contract_name": "InefficientContract2",
        "message": "No uint* variables - no packing required"
    },
    {
        "analysis_type": "detect_string_to_bytes32",
        "contract_name": "EmptyContract",
        "message": "No string variables - no conversion required"
    },
    {
        "analysis_type": "detect_string_to_bytes32",
        "contract_name": "InefficientContract1",
        "string_variables": [
            {
                "var_name": "contract_address",
                "var_intialized": true
            },
            {
                "var_name": "owner_name",
                "var_intialized": true
            }
        ],
        "message": "Instead of string variables that are initialized with a fixed value, in most cases you can fit it in a bytes32 instead."
    },
    {
        "analysis_type": "detect_string_to_bytes32",
        "contract_name": "InefficientContract2",
        "string_variables": [
            {
                "var_name": "networkVersionUsed",
                "var_intialized": true
            }
        ],
        "message": "Instead of string variables that are initialized with a fixed value, in most cases you can fit it in a bytes32 instead."
    },
    {
        "analysis_type": "detect_dynamic_size_arrays",
        "contract_name": "EmptyContract",
        "message": "No dynamic arrays - no optimization required"
    },
    {
        "analysis_type": "detect_dynamic_size_arrays",
        "contract_name": "InefficientContract1",
        "dynamic_arrays": [
            {
                "arr_name": "largeArray",
                "arr_type": "uint256[]"
            },
            {
                "arr_name": "dynamicArray",
                "arr_type": "uint8[]"
            }
        ],
        "message": "Consider using statically sized arrays instead of dynamic arrays for the array variables, if possible - example: uint256[] => uint256[10]"
    },
    {
        "analysis_type": "detect_dynamic_size_arrays",
        "contract_name": "InefficientContract2",
        "message": "No dynamic arrays - no optimization required"
    },
    {
        "analysis_type": "detect_zero_init",
        "contract_name": "EmptyContract",
        "message": "No auto initialized vars - no optimization required"
    },
    {
        "analysis_type": "detect_zero_init",
        "contract_name": "InefficientContract1",
        "auto_initialized_vars": [
            {
                "var_name": "largeArray",
                "var_type": "uint256[]"
            },
            {
                "var_name": "balances",
                "var_type": "mapping(address => uint256)"
            },
            {
                "var_name": "totalBalance",
                "var_type": "uint256"
            },
            {
                "var_name": "anSmallVariable",
                "var_type": "uint8"
            },
            {
                "var_name": "anotherSmallVariable",
                "var_type": "uint8"
            },
            {
                "var_name": "justAnotheruint16",
                "var_type": "uint16"
            },
            {
                "var_name": "justAnotheruint32",
                "var_type": "uint32"
            }
        ],
        "message": "These variables will be auto initialized to their zero value - consider intializing them to the zero value explicitly."
    },
    {
        "analysis_type": "detect_zero_init",
        "contract_name": "InefficientContract2",
        "auto_initialized_vars": [
            {
                "var_name": "person",
                "var_type": "InefficientContract2.Person"
            }
        ],
        "message": "These variables will be auto initialized to their zero value - consider intializing them to the zero value explicitly."
    },
    {
        "analysis_type": "detect_memory_struct_arguments",
        "contract_name": "InefficientContract2",
        "memory_struct_arguments": [
            {
                "function_name": "doSomethingMemory",
                "parameter_name": "person2",
                "parameter_type": "InefficientContract2.Person"
            }
        ],
        "message": "Struct arguments should use 'calldata' instead of 'memory' for better gas optimization."
    },
    {
        "analysis_type": "detect_freeable_storage",
        "contract_name": "EmptyContract",
        "message": "No storage vars - no optimization required"
    },
    {
        "analysis_type": "detect_freeable_storage",
        "contract_name": "InefficientContract1",
        "storage_variables": [
            {
                "var_name": "largeArray",
                "var_type": "uint256[]",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "balances",
                "var_type": "mapping(address => uint256)",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "totalBalance",
                "var_type": "uint256",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "anSmallVariable",
                "var_type": "uint8",
                "freeable_storage_bytes": 1
            },
            {
                "var_name": "anotherSmallVariable",
                "var_type": "uint8",
                "freeable_storage_bytes": 1
            },
            {
                "var_name": "justAnotheruint16",
                "var_type": "uint16",
                "freeable_storage_bytes": 2
            },
            {
                "var_name": "justAnotheruint32",
                "var_type": "uint32",
                "freeable_storage_bytes": 4
            },
            {
                "var_name": "isActive",
                "var_type": "bool",
                "freeable_storage_bytes": 1
            },
            {
                "var_name": "isConfirmed",
                "var_type": "bool",
                "freeable_storage_bytes": 1
            },
            {
                "var_name": "isTransfered",
                "var_type": "bool",
                "freeable_storage_bytes": 1
            },
            {
                "var_name": "threshold",
                "var_type": "uint256",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "contract_address",
                "var_type": "string",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "owner_name",
                "var_type": "string",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "fixedArray",
                "var_type": "uint8[10]",
                "freeable_storage_bytes": 10
            },
            {
                "var_name": "dynamicArray",
                "var_type": "uint8[]",
                "freeable_storage_bytes": 32
            }
        ],
        "message": "Variables in storage can be freed with 'delete' command when not used anymore."
    },
    {
        "analysis_type": "detect_freeable_storage",
        "contract_name": "InefficientContract2",
        "storage_variables": [
            {
                "var_name": "networkVersionUsed",
                "var_type": "string",
                "freeable_storage_bytes": 32
            },
            {
                "var_name": "person",
                "var_type": "InefficientContract2.Person",
                "freeable_storage_bytes": 96
            }
        ],
        "message": "Variables in storage can be freed with 'delete' command when not used anymore."
    },
    {
        "analysis_type": "detect_external_public_functions",
        "contract_name": "EmptyContract",
        "message": "No public or external functions - no optimization required"
    },
    {
        "analysis_type": "detect_external_public_functions",
        "contract_name": "InefficientContract1",
        "public_external_functions": [
            {
                "function_name": "inefficientLoop",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "redundantComputation",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "inefficientStorageAccess",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "badVisibilityFunction",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "badBooleanPacking",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "expensiveArrayResizing",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 1
            },
            {
                "function_name": "externalCallsExample",
                "visibility": "public",
                "internal_calls": 2,
                "external_calls": 0
            },
            {
                "function_name": "getBalance",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "getTotalBalance",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            }
        ],
        "message": "To optimize gas consumption, consider making functions internal whenever possible. If a function must be publicly accessible, mark it as external to utilize calldata for parameter passing, which is generally more gas-efficient than memory."
    },
    {
        "analysis_type": "detect_external_public_functions",
        "contract_name": "InefficientContract2",
        "public_external_functions": [
            {
                "function_name": "setPerson",
                "visibility": "external",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "getPerson",
                "visibility": "external",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "doSomethingMemory",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            },
            {
                "function_name": "doSomethingCalldata",
                "visibility": "public",
                "internal_calls": 0,
                "external_calls": 0
            }
        ],
        "message": "To optimize gas consumption, consider making functions internal whenever possible. If a function must be publicly accessible, mark it as external to utilize calldata for parameter passing, which is generally more gas-efficient than memory."
    }
]